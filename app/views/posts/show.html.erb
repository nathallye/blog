  <div class="shadow p-5 bg-light rounded"> 
    <div class="text-center mb-5"> <!--text-center  = centralizar o texto da div-->
      <h1> <%= @post.title %> </h1>
      <p class="text-muted"> <!-- class text-muted = Texto fica cinzinha-->
        <strong> Por <%= @post.author %> </strong> <br> <!--
        * Tag strong para ficar em negrito; 
        * post.author = mostrar dinamicamente o nome do autor do post
        * Tag br para fazer uma quebra de linha
        -->
        <%= I18n.l(@post.created_at, format: :long) %>
        <!-- 
        * I18n.l = para mudar a formatação de data para a padrão do brasil
        o que vem depois do I18n.l é o parâmetro, ex.: @post.created_at - que é a data e hora de criação do post
        * @post.created_at = data de criação do post (mostra dinamicamente também)
        * format: = passando o parâmetro de formato
        * :long = em seguida passamos um simbolo long, que nada mais é que o formato longo que mostra o ano
        -->
      </p>
    </div>

    <div class="px-5"> <!--px aplica o espaço só na horizontal; py aplica o espaço só na vertical-->
       <%= @post.body.gsub("\n", "<br>").html_safe %> <!--
       * .gsub() = método para exibir a quebra de linha, pois está salvo no banco de dados como "\n" e precisa ser salvo com <br> 
       * ("\n", "<br>") = dentro vamos passar os parâmetros, o primeiro o que queremos substituir e em seguida para que elemento vamos substituir 
       * .html_safe = informar que o html é seguro para que ele não somente renderize a tag <br> e sim faça a quebra de linha 
       -->
    </div>
  </div>

  <div class="m-5">
    <div class="text-center">
      <h4> 
        <%= pluralize(@post.comments.count, "Comentário") %> <!--
      * tag <h4> pois é um titulo
      * pluralize() = Esse método serve para pluralizar uma string quando for necessário, nesse caso quando o número de comentário for igual a 0, 2 ou mais...
      depois do método pluralize () passamos o número de registros a ser exibido nesse caso é @post.comments.count
      e em seguida a string que vai ser pluralizada ou não (configuração feita no arquivo inflections.rb)
      * @post.comments.count = Contar o número de comentários associados a esse post
      * Aqui fica @post, pois é uma variável de instância
      -->
        <% if (@post.comments.count == 0) %> <!--Se o total de commentários for igual a zero-->
          <span class="badge badge-success">Seja o primeiro a comentar!</span> <!--badge bg-success = Criação de Tag-->
        <% end %>
      </h4> 
    </div>

    <div class="shadow-sm m-3 p-3 bg-light rounded"> <!--shadow-sm = Sombra com m-3; bg-light = fundo cinza; rounded = arredondado-->
      <%= form_with model: @comment, local: true do |form| %> <!-- 
       * form_with = Help do Rails para criação de formulário 
       model: @comment = passamos o objeto vazio do controler para armazenar

       * local: true do |form| = Não utilizar ajax de acordo com o padrão do Rails
       -->
        <%= form.hidden_field :post_id, value: @post.id %> <!--Campo escondido do id do post, para associar lá no controller dos comentários a que post determinado comentário pertence -->

        <div class="form-group mb-2"> 
          <%= form.label :author %>
          <%= form.text_field :author, class: "form-control", required: true %>
        </div>

        <div class="form-group mb-2"> 
          <%= form.label :body %>
          <%= form.text_area :body, class: "form-control", rows: 2, required: true %> <!--Flager rows(lista) = marcador-->
        </div>

        <%= form.submit 'Enviar', class: "btn btn-dark", 
          data: { disable_with: "Enviando..."} %> <!--
        Flager(marcador) data { disable_with: "Enviando..."} = toda vez que submeter a atualização ou o novo post, vai desabilitar o botão e vai aparecer "enviando" -->
      <% end %>
    </div>

    <% @comments.each do |comment| %> <!--Exibir um em loop o array de comentários definidos lá no arquivo de post_controller:
    def show
      @comments = @post.comments #ler todos comentários que conseguimos acessar em @post.comments
    end
    essa variável @post foi definida pelo scafald-->
      <div class="shadow-sm m-3 p-3 bg-light rounded"> <!--shadow-sm = Sombra com m-3; bg-light = fundo cinza; rounded = arredondado-->
        <div class="row"> <!--row = fileira-->
          <div class="col"> <!--col = coluna-->
            <strong> <%= comment.author %> </strong> <!--Nome do autor do comentário-->
          </div>

          <div class="col text-right"> <!--col = coluna; text-right = texto alinhado para direita-->
            <em data-toggle="tooltip" data-placement="top" title="<%= I18n.l(comment.created_at, format: :long) %>"> <!--
            * tooltips para exibir a data e hora exata de criação quando o usuário passar o cursor sobre o tempo relativo. Disponivel em: https://getbootstrap.com/docs/4.0/components/tooltips/
            * Não esquecer de ativar via javascript no arquivo application.js
            -->
              <%= time_ago_in_words comment.created_at %> atrás 
            </em> <!--
            * comment.created_at = Data de criação do comentário
            * time_ago_in_words = Formata em tempo relativo (ex.:17min atrás)
            -->
          </div>
        
        </div>

        <hr> <!--Quebra de linha horizontal-->
        <%= sanitize(comment.body.gsub("\n", "<br>")).html_safe %> <!--
        * sanitize = Remove qualquer script malicioso
        * comment.body = Exibir o texto dos comentários
        * .gsub() = método para exibir a quebra de linha, pois está salvo no banco de dados como "\n" e precisa ser salvo com <br> 
        * ("\n", "<br>") = dentro vamos passar os parâmetros, o primeiro o que queremos substituir e em seguida para que elemento vamos substituir 
        * .html_safe = informar que o html é seguro para que ele não somente renderize a tag <br> e sim faça a quebra de linha 
       -->
      </div>
    <% end %>
  </div>

  
  
 


